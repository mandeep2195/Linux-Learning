1.	type = Type cmd is used for knowing if the cmd is of a external package or is it inbuilt in linux EX: type cd.
2.	echo = Echo cmd is used for printing a piece of text EX: echo hello world
3.	pwd = pwd cmd is used for printing the current working directory
4.	exec = Runs an external program that we specify. Note that in most cases, this is better accomplished by just typing the name of the program we want to run, but the exec command has one special feature: rather than create a new process that runs alongside the shell, the new process replaces the shell, as can verified by subsequent.
5.	history =  history cmd is used to view the history of the cmd that we have used till now (Last 500 cmds)
6.	alias = alias cmd is used for declaring a shortcut for a long cmd that you dont want to type again and again SYNTAX: alias SHORTCUT='COMMAND' EX: alias ls='ls -l' 
7.	ls = ls command is used to list all files and folders in the current working directory
8.	exit = exit cmd is used for exitting the terminal or the super user account 
9.	man = man command is used for printing the manual of the command you want EX: man ls
10.	info = info command is used for printing the info of the commands you want it consists of more details than the man command
11.	cat = cat command is used to concatinate and print the file on terminal EX: echo hello world | cat > harry.txt #### (adds hello world in harry.txt but every time it replaces previous data)        EX2: hello world | cat >> harry.txt #### (appends hello world in harry.txt in next line )
12.	expand = expand command is used to view the text file in a beautiful manner it'll remove tabs(space) in the text EX: expand --tabs=1 harry.txt
13.	unexpand = unexpand command is just opposite of expand command
14.	head = head command is used to display first 10 lines of the text file(BY Default) EX: head harry.txt
15.	tail = tail command is used to display last 10 lines of the text file(BY Default) EX: tail harry.txt
16.	paste = paste command is used to merges files line by line, separating the lines from each file with tabs (by default), or another delimiter that can be specified
17.	split = split command is used to split the file in two or more separate files according to our needs EX:  paste -d= file1 file2
18.	tr = tr command is used to translate the file in lower case or upper case (according to our needs[if we need to convert all letters to upper case we can use {cat harry.txt | tr [a-z] [A-Z]} in similar way we can upper case only "T' letters or any other letters in the file])
19.	uniq = The uniq command allows us to report or remove duplicate lines in a file We must note that uniq does not detect repeated lines unless they are adjacent. Thus, uniq is commonly used along with a preceding sort EX: sort file3 | uniq
20.	split = In Linux, the split command is used to split a large file into smaller parts. This can be useful when dealing with large data sets or when you need to transfer files in smaller chunks. The basic syntax of the split command is as follows: split [options] input_file [prefix]
21.	sort = sort command is used to sort the file in ascending or decending order according to our needs EX: sort 4.txt
22.	cut = The cut command extracts portions of input lines (from stdin or files) and displays the result on standard output, based on number of bytes (-b), characters (-c), or fields (-f).When using cut based on fields, the default field separator is a tab, but a different separator can be specified by using the -d option. EX: cut -f 1,3 harry.txt
23.	fmt = The fmt command in Linux is used to format text files, adjusting the line breaks and word wrapping the text to fit within a specified width. It is particularly useful for formatting paragraphs of text or files with long lines. The fmt command reads the text from a file or standard input and writes the formatted output to standard output. EX: fmt -w 80 1.txt
24.	pr = The pr command in Linux is used to prepare and format files for printing or for display on the terminal. It paginates or arranges text files in a specified format, making it easier to view or print them in a structured manner. The pr command can add headers, footers, page numbers, and control the number of columns and lines per page. pr -h "Example Header" 1.txt

